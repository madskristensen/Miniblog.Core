<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Understanding ASPNETCORE_ENVIRONMENT Modes</title>
  <slug>understanding-aspnetcore-environment-modes</slug>
  <pubDate>2019-12-18T04:28:00.000Z</pubDate>
  <lastModified>2019-12-18T04:40:55.810Z</lastModified>
  <excerpt />
  <content>&lt;p&gt;&lt;strong&gt;The gist: ASPNETCORE_ENVIRONMENT variables map directly to the appsettings.json files provided with the template by name. Such that appsettings.Development.json references the environment variable with the value “Development”.&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;When using Visual Studio to develop ASP.NET Core applications, you have access to Environment variables in the project property’s “Debug” tab.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.bacardibryant.com/Posts/files/clip_image002_637122397850427291.png"&gt;&lt;img title="clip_image002" style="margin: 0px; display: inline; background-image: none;" border="0" alt="clip_image002" src="http://www.bacardibryant.com/Posts/files/clip_image002_thumb_637122397859181039.png" width="244" height="204" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;This setting determines the way that ASP.NET applies your application’s configuration settings in that the value can impact which configuration file is used at a given time. One of the simplest things to note is that the value “Development” here corresponds to the filename annotation appsettings.Development.json. For example, by changing the value to “Production”, to indicate that you are running in a production environment, Visual Studio will look for both the appsettings.json file as well as a corresponding file, appsettings.Production.json at run time.&lt;/p&gt;  &lt;h3&gt;Why is this important?&lt;/h3&gt;  &lt;p&gt;When using environment dependent settings, you will want to ensure that when your application is deployed, the correct settings are loaded. It can guarantee expected behavior as well as act as a form of code security ensuring that no developer mode secrets are exposed by your production site. An easy example is the developer exception page.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.bacardibryant.com/Posts/files/clip_image004_637122397862546618.png"&gt;&lt;img title="clip_image004" style="display: inline; background-image: none;" border="0" alt="clip_image004" src="http://www.bacardibryant.com/Posts/files/clip_image004_thumb_637122397864308720.png" width="244" height="191" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;During development, being able to see the stack trace and other debug information can be useful. However, if this is exposed by your production site then it could display some information about your site configuration and/or code structure that you wouldn’t want a potential hacker to see. Deploying your application in release mode will not prevent this because the environment variable ultimately determines which configuration file is read.&lt;/p&gt;    &lt;p&gt;The code from the Startup.cs page below will read the value in the environment variable, which is currently “Development”, and load the developer error page. &lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.bacardibryant.com/Posts/files/clip_image002[4]_637122397866803514.png"&gt;&lt;img title="clip_image002[4]" style="margin: 0px; display: inline; background-image: none;" border="0" alt="clip_image002[4]" src="http://www.bacardibryant.com/Posts/files/clip_image002[4]_thumb_637122397868466904.png" width="244" height="123" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The only way to prevent this without making any other changes is to change the value in the properties pane to Production or something else that would default the evaluation to false. In this case, I changed it to read “Home”.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.bacardibryant.com/Posts/files/clip_image004[4]_637122397871585738.png"&gt;&lt;img title="clip_image004[4]" style="display: inline; background-image: none;" border="0" alt="clip_image004[4]" src="http://www.bacardibryant.com/Posts/files/clip_image004[4]_thumb_637122397873283433.png" width="244" height="203" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;If the value does not match or if the variable does not exist, in which case it is null, the expression will evaluate to false causing ASP.NET Core to skip loading the developer error page. As a result, a custom error page that I created was loaded as seen below.&lt;/p&gt;    &lt;p&gt;was loaded as seen below.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.bacardibryant.com/Posts/files/clip_image001_637122397874632162.png"&gt;&lt;img title="clip_image001" style="margin: 0px; display: inline; background-image: none;" border="0" alt="clip_image001" src="http://www.bacardibryant.com/Posts/files/clip_image001_thumb_637122397875967896.png" width="244" height="171" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I was able to trigger this error by adding treating the word “hacker” as invalid in the path using the code below. This code would not typically appear in your Startup.cs class.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.bacardibryant.com/Posts/files/clip_image002[6]_637122397876985821.png"&gt;&lt;img title="clip_image002[6]" style="display: inline; background-image: none;" border="0" alt="clip_image002[6]" src="http://www.bacardibryant.com/Posts/files/clip_image002[6]_thumb_637122397878194611.png" width="244" height="74" /&gt;&lt;/a&gt;&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>asp.net core</category>
    <category>programming</category>
    <category>visual studio</category>
  </categories>
  <comments></comments>
</post>