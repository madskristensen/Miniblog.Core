<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>XOS MVC Framework v1 Released</title>
  <slug>xos-mvc-framework-v1-released</slug>
  <pubDate>2014-03-05T18:43:00.000Z</pubDate>
  <lastModified>2019-02-03T19:35:09.279Z</lastModified>
  <excerpt />
  <content>&lt;p&gt;nuget package now available!&lt;/p&gt;  &lt;p&gt;&lt;font style="font-weight: bold"&gt;the gist&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;i've deployed the &lt;strong&gt;xos.mvc.framework&lt;/strong&gt; nuget package which offers base model classes, controllers, and commonly used attribute filters for mvc projects as well as some nifty jquery and css plugins/helpers aimed to speed up asp.net mvc application development. the framework can be found on &lt;a href="http://www.nuget.org/packages/XOS.MVC.Framework/" target="_blank"&gt;nuget.org&lt;/a&gt;. the source code is also available on &lt;a href="https://github.com/bacardibryant/Xos.Mvc.Framework" target="_blank"&gt;github&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;this was long awaited.&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;as it goes with development, i found myself doing a lot of xcopy code sharing where i had a folder full of &amp;quot;development tools&amp;quot; that i would drag and drop to each new project. the problem is, if i added or modified the code for a particular project, then i would have to remember to manually copy and work the changes back into the core project along with the other projects that used the framework. the net result being various &lt;em&gt;versions&lt;/em&gt; of the code with no way to truly know which folder had the latest version of the code.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;so, i've finally gotten around to creating a nuget package containing this &lt;strong&gt;common code&lt;/strong&gt;. while this initial release isn't the complete library (i had to pretty much gut it for mass consumption), i plan to continue expanding on it not only for personal use and convenience, but also for anyone else who might benefit from an &lt;strong&gt;unobstrusive&lt;/strong&gt; set of code snippets.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;organic code...no additives or dependencies.&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;the goal behind the xos mvc framework is to be an &lt;strong&gt;unobstrusive, only use what you want, mvc application toolkit. xos-mvc is not intended to be a configuration heavy, dependency riddled swiss army knife.&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;there may be code overlap that is more comprehensively provided by another framework, in which case i likely chose not to implement it because after years of chasing down broken dependencies, i've become a proponent for organic code. organic code is any code that is pure to its original language such that it is widely compatible within its domain. an example of this being a website written in pure html, css, and javascript.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;blockquote&gt;   &lt;p align="center"&gt;&lt;em&gt;organic code strives to be ide agnostic. organic code strives to be platform agonistic. organic code strives to be configuration free.&lt;/em&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;it isn't always possible.&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;note that the sentences read &amp;quot;&lt;em&gt;organic code strives to be...&lt;/em&gt;&amp;quot;. this is because it isn't 100% possible and &lt;strong&gt;that's fine&lt;/strong&gt;. so use jquery or knockout or angular, use the html5shiv or the polyfill, or use twitter bootstrap. these modules are still organic in that by incorporating any one into your project does not introduce a third-party dependency. jquery is pure javascript. the html5shiv is pure javascript. and lastly the polyfill is pure javasript. an example of what isn't organic is castle.windsor. i like windsor and boo and rhino and on and on. there are even scenarios where ioc containers, orm tools, and config files are the way to go; especially for larger more complex applications that have been modularized. &lt;strong&gt;it's just that sadly, i've seen these frameworks implemented in simple single-domain applications, making them unnecessarily complex and difficult to maintain&lt;/strong&gt;. applications that are ide dependent because that&lt;em&gt;&amp;quot;|version|&amp;quot;&lt;/em&gt; of the ide was compatible with the components used in development. These are applications that may have benefitted from simply adding a package that contains extension methods written in the core language and a base set of classes implementing some common properties.&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>software packages</category>
    <category>programming</category>
    <category>asp.net</category>
  </categories>
  <comments></comments>
</post>